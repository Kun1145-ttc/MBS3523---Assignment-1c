import cv2
import numpy as np
import serial
import time

# Set up and open Arduino connection
try:
    ser = serial.Serial('COM4', baudrate=9600, timeout=1)
    time.sleep(2)
except serial.SerialException as e:
    print("Error opening serial port:", e)
    exit()

def send_servo_positions(angle_h, angle_v):
    """Send angles to Arduino"""
    data = f"{angle_h},{angle_v}\r"
    try:
        ser.write(data.encode())
        print(f"Sent angles - Horizontal: {angle_h} Vertical: {angle_v}")
    except serial.SerialException as e:
        print("Send failed:", e)

def nothing(x):
    pass

# Create HSV adjustment window
cv2.namedWindow('Trackbars')
trackbar_params = {
    'HueLow': (40, 255),
    'HueHigh': (80, 255),
    'SatLow': (100, 255),
    'SatHigh': (80, 255),
    'ValLow': (255, 255),
    'ValHigh': (255, 255)
}
for param, (low, high) in trackbar_params.items():
    cv2.createTrackbar(param, 'Trackbars', low, high, nothing)

# Open camera
cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
if not cap.isOpened():
    print("Cannot open camera")
    exit()

prev_angle_h = prev_angle_v = 90
alpha, area_threshold, dead_zone = 0.09, 2000, 2

while True:
    ret, frame = cap.read()
    if not ret:
        print("Cannot read frame")
        break

    # Get HSV threshold values from trackbars
    trackbar_keys = list(trackbar_params.keys())
    lower_hsv = np.array([cv2.getTrackbarPos(trackbar_keys[i], 'Trackbars') for i in range(3)])
    upper_hsv = np.array([cv2.getTrackbarPos(trackbar_keys[i], 'Trackbars') for i in range(3, 6)])

    mask = cv2.inRange(cv2.cvtColor(frame, cv2.COLOR_BGR2HSV), lower_hsv, upper_hsv)
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Output debug info
    print(f"Number of contours: {len(contours)}")

    if contours:
        largest_contour = max(contours, key=cv2.contourArea)
        area = cv2.contourArea(largest_contour)
        print(f"Largest contour area: {area}")

        if area > area_threshold:
            x, y, w, h = cv2.boundingRect(largest_contour)
            cx, cy = x + w // 2, y + h // 2
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv2.circle(frame, (cx, cy), 5, (0, 0, 255), -1)

            # Calculate target angles
            frame_width, frame_height = frame.shape[1], frame.shape[0]
            target_angle_h = int(np.interp(cx, [0, frame_width], [180, 0]))
            target_angle_v = int(np.interp(cy, [0, frame_height], [180, 0]))

            # Smooth angles
            smooth_angle_h = prev_angle_h if abs(target_angle_h - prev_angle_h) <= dead_zone else int(alpha * target_angle_h + (1 - alpha) * prev_angle_h)
            smooth_angle_v = prev_angle_v if abs(target_angle_v - prev_angle_v) <= dead_zone else int(alpha * target_angle_v + (1 - alpha) * prev_angle_v)

            prev_angle_h, prev_angle_v = smooth_angle_h, smooth_angle_v
            send_servo_positions(smooth_angle_h, smooth_angle_v)

            cv2.putText(frame, f"H: {smooth_angle_h} V: {smooth_angle_v}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)
        else:
            cv2.putText(frame, "Object too small or lost", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
    else:
        cv2.putText(frame, "No object detected", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

    cv2.imshow("Frame", frame)
    cv2.imshow("Mask", mask)
    time.sleep(0.1)

    if cv2.waitKey(1) & 0xFF == 27:  # Press ESC to exit
        break

cap.release()
cv2.destroyAllWindows()
ser.close()
